---
layout: post
title: "Weekly Status Report"
date: "2016-09-22 06:51:34 -0700"
categories: Project
tags: [R, rstats, Data, Science, Dashboard, Analytics, Digital Foundry, Project, Product, Docker, Shiny, ShinyDashboard]
---


> The npm install command will take several minutes to run depending on internet speed
{:.warning}
{:title="my title"}
{: #myid }


&emsp; For my most recent employer I coded and deployed a weekly status reporting tool. Prior to my arrival, weekly status reports were used as the main source of updating company leadership - such as the COO, CEO and President - with the weekly details of every project from each of the stakeholders perspectives. The most important purpose this report served, however, was in making sure our company owners never received a surprise call from a client.  
&emsp; This tool had two types of users. The most common user was account and project manager. This user would employ the tool to communicate a weekly summary line and a super pleasing activity line to recount the weeks biggest activities into a single line each. Following was a detailed review should the reviewing party wish to investigate further. As this tool started as an email chain, the subject line was reserved for the project name and the weekly color rating - Green for Good, Yellow for uncertain, Red for disaster and expect a call. The other type of user, company leadership, was the intended recipient of the tool.  
&emsp; A soon as I started my work at for this employer, it became painfully obvious that we were waisting valuable data week after week. Each week account and project managers would report on the activities, progress and performance of each team and at times detail on individuals. And each week company leadership would skim the emails before archiving away to never be used again.  
&emsp; As soon as I had earned the right and acquired some free time, I jumped at the opportunity to solve a problem my company was unaware of but had much to gain from. I would use natural language processing to codify each teams weekly report, design a visual feedback system for the most common use - rapid query of team status, and develop a machine learning benchmarking system that would improve over time in its ability to track and recognize and alert to a schematic of risk.  
&emsp; Most exciting about this project was the substantial amount of practical domain knowledge and personal experience I would get to draw on for solutions and inspiration.  
&emsp; The final project to my Data Science certification was a predictive text application meant to simulate an experience close to swift or any of the quick type mobile keyboard apps. An analytics dashboard accessible online and updated in real-time via google docs won me the 2015 San Diego Data Science hackathon. The inceptive product of the educational technology company I help launch relied on support vector machines to classify types of learners from statistics collected on students as they used the product - most significantly the text from the notes they took in class. These projects paired with a year of experience writing and using weekly status reports qualified me to explore a very fascinating topic in the form of a valuable and practical product still in use every week.  
&emsp; The first facet of the Weekly Status Report I had decided needed to change attacked the first word in the products name: Weekly. With the main goal of reducing anticipation or preventing an owner from receiving an unexpected call from a client, Monday's news should not wait until Friday at Noon. To solve this, a live dashboard would be used - like the student attendance and behavior modeling dashboard I built for Monarch School with real-time updates from Google Docs.  
&emsp; Reusing almost all the boiler plate from that project I used the Shiny package, ShinyDashboard, to layout the UI using the easy to manipulate and fine tune Bootstrap. The ShinyDashboard package came with two more great pieces for me to leverage in this product. The Bootstrap components for the output also came with user input widgets like text area that would be used for typing in the status reports. In a clever enough way, the implementation of applications written in R using the webstack and the Bootstrap framework meant that I had access to JavaScript through one way or another. This came in particularly useful when performing the security dance with Google's application API which would allow for the sync and pull of data from Google Documents creating a database with real-time updates to the dashboard.  
